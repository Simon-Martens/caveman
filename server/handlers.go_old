package server

import (
	"errors"
	"fmt"
	"io/fs"
	"net/http"
	"net/url"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/Simon-Martens/caveman/app"
	"github.com/Simon-Martens/caveman/db"
	"github.com/Simon-Martens/caveman/models"

	"github.com/labstack/echo/v4"

	pbcore "github.com/Simon-Martens/caveman/core"
	pbforms "github.com/Simon-Martens/caveman/forms"
	pbmodels "github.com/Simon-Martens/caveman/models"
	pbtokens "github.com/Simon-Martens/caveman/tokens"
)





func HandleSetup(app *app.App, n int) echo.HandlerFunc {
	return func(c echo.Context) error {
		s := app.RefreshSetupState()
		// We allow for every setup step to be accessed, except for the admin creation,
		// which is only allowed if the setup state is 1
		if s == 1 && c.Path() != "/setup/1" {
			return c.Redirect(http.StatusSeeOther, "/setup/"+strconv.Itoa(s))
		}

		if s != 1 && c.Path() == "/setup/1" {
			return c.Redirect(http.StatusSeeOther, "/setup/"+strconv.Itoa(s))
		}

		return render_template(c, "setup/"+strconv.Itoa(n), base_state, app)
	}
}

func HandleSetup1Post(app *app.App) echo.HandlerFunc {
	return func(c echo.Context) error {
		s := app.RefreshSetupState()
		if s != 1 {
			return ErrorMessage(http.StatusForbidden, "We do not accept admins at this time.")
		}

		u := c.FormValue("username")
		p := c.FormValue("password")
		pc := c.FormValue("pwconfirm")

		admin := &pbmodels.Admin{}

		form := pbforms.NewAdminUpsert(app.PocketBase(), admin)

		form.Email = u
		form.Password = p
		form.PasswordConfirm = pc

		event := new(pbcore.AdminCreateEvent)
		event.HttpContext = c
		event.Admin = admin

		// create the admin
		submitErr := form.Submit(
			func(next pbforms.InterceptorNextFunc[*pbmodels.Admin]) pbforms.InterceptorNextFunc[*pbmodels.Admin] {
				return func(m *pbmodels.Admin) error {
					event.Admin = m

					return app.PocketBase().OnAdminBeforeCreateRequest().Trigger(event, func(e *pbcore.AdminCreateEvent) error {
						if err := next(e.Admin); err != nil {
							return ErrorMessage(http.StatusInternalServerError, err.Error())
						}

						return app.PocketBase().OnAdminAfterCreateRequest().Trigger(event, func(e *pbcore.AdminCreateEvent) error {
							if e.HttpContext.Response().Committed {
								return nil
							}

							record, _ := app.Dao().FindAdminByEmail(u)
							token, err := pbtokens.NewAdminAuthToken(app.PocketBase(), record)

							if err != nil {
								return ErrorMessage(http.StatusInternalServerError, "Could not generate auth token.")
							}

							return successfull_login(c, "Admin", token)
						})
					})
				}
			})

		return submitErr
	}
}

func HandleSetup2Post(app *app.App) echo.HandlerFunc {
	return func(c echo.Context) error {
		// TODO: escape the form values
		// TODO: sanity check
		n := c.FormValue("name")
		d := c.FormValue("desc")
		u := c.FormValue("url")
		e := c.FormValue("edition")
		cn := c.FormValue("contact")
		cr := c.FormValue("curie")
		_, metadataf, _ := c.Request().FormFile("logo")

		settings := &models.Settings{
			Name:    n,
			Desc:    d,
			URL:     u,
			Edition: e,
			Contact: cn,
			Curie:   cr,
		}

		err := db.SaveSettings(app.PocketBase(), settings, metadataf)

		if err != nil {
			return ErrorMessage(http.StatusBadRequest, "Could not save settings.")
		}

		app.RefreshSetupState()
		app.RefreshSettings()

		return render_partial_template(c, "setup/2/_settings", base_state, app)
	}
}

func HandleLoginPost(app *app.App) echo.HandlerFunc {
	return func(c echo.Context) error {
		p := c.FormValue("password")
		u := c.FormValue("username")
		r := c.FormValue("role")

		if len(p) == 0 || len(u) == 0 || (r != "Admin" && r != "User" && r != "Editor") {
			return ErrorMessage(http.StatusBadRequest, "The FormData send does not fit the required schema")
		}

		atoken, err := generate_admin_auth(app, u, p)
		if err == nil {
			return successfull_login(c, r, atoken)
		} else if r == "Admin" {
			return ErrorMessage(http.StatusUnauthorized, "Invalid credentials")
		}

		utoken, err := generate_user_auth(app, u, p)
		if err != nil {
			return ErrorMessage(http.StatusUnauthorized, "Invalid credentials")
		}
		return successfull_login(c, r, utoken)
	}
}

func HandleTemplate(app *app.App, datafunc DataFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		return render_template(c, c.Path(), datafunc, app)
	}
}

func HandlePartialTemplate(app *app.App, datafunc DataFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		return render_partial_template(c, c.Path(), datafunc, app)
	}
}
